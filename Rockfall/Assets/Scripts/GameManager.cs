using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class GameManager : Singleton<GameManager>
{
    // Шаблон корабля, позиция его создания и текущий объект корабля
    public GameObject shipPrefab;
    public Transform shipStartPosition;
    public GameObject currentShip { get; private set; }
    // Шаблон космической станции, позиция ее создания и текущий объект станции
    public GameObject spaceStationPrefab;
    public Transform spaceStationStartPosition;
    public GameObject currentSpaceStation { get; private set; }
    // Сценарий, управляющий главной камерой
    public SmoothFollow cameraFollow;
    // Контейнеры для разных групп элементов пользовательского интерфейса
    public GameObject inGameUI;
    public GameObject pausedUI;
    public GameObject gameOverUI;
    public GameObject mainMenuUI;
    // Игра находится в состоянии проигрывания?
    public bool gameIsPlaying { get; private set; }
    // Система создания астероидов
    public AsteroidSpawner asteroidSpawner;
    // Признак приостановки игры.
    public bool paused;
    // Отображает главное меню в момент запуска игры
    void Start()
    {
        ShowMainMenu();
    }
    // Отображает заданный контейнер с элементами пользовательского интерфейса и скрывает все остальные.
    void ShowUI(GameObject newUI)
    {
        // Создать список всех контейнеров.
        GameObject[] allUI = { inGameUI, pausedUI, gameOverUI, mainMenuUI };
        // Скрыть их все.
        foreach (GameObject UIToHide in allUI)
        {
            UIToHide.SetActive(false);

        }
        // И затем отобразить указанный.
        newUI.SetActive(true);
    }
    public void ShowMainMenu()
    {
        ShowUI(mainMenuUI);
        // Когда игра запускается, она находится не в состоянии проигрывания
        gameIsPlaying = false;
        // Запретить создавать астероиды
        asteroidSpawner.spawnAsteroids = false;
    }
    // Вызывается в ответ на касание кнопки New Game
    public void StartGame()
    {
        // Вывести интерфейс игры
        ShowUI(inGameUI);
        // Перейти в режим игры
        gameIsPlaying = true;
        // Если корабль уже есть, удалить его
        if (currentShip != null)
        {
            Destroy(currentShip);
        }
        // То же для станции
        if (currentSpaceStation != null)
        {
            Destroy(currentSpaceStation);
        }
        // Создать новый корабль и поместить его в начальную позицию
        currentShip = Instantiate(shipPrefab);
        currentShip.transform.position = shipStartPosition.position;
        currentShip.transform.rotation = shipStartPosition.rotation;
        // То же для станции
        currentSpaceStation = Instantiate(spaceStationPrefab);
        currentSpaceStation.transform.position = spaceStationStartPosition.position;
        currentSpaceStation.transform.rotation = spaceStationStartPosition.rotation;
        // Передать сценарию управления камерой ссылку на новый корабль, за которым она должна следовать
        cameraFollow.target = currentShip.transform;

        // Начать создавать астероиды
        asteroidSpawner.spawnAsteroids = true;
        // Сообщить системе создания астероидов позицию новой станции
        asteroidSpawner.target = currentSpaceStation.transform;
    }
    // Вызывается объектами, завершающими игру при разрушении
    public void GameOver()
    {
        // Показать меню завершения игры
        ShowUI(gameOverUI);
        // Выйти из режима игры
        gameIsPlaying = false;
        // Удалить корабль и станцию
        if (currentShip != null)
            Destroy(currentShip);
        if (currentSpaceStation != null)
            Destroy(currentSpaceStation);
        // Прекратить создавать астероиды
        asteroidSpawner.spawnAsteroids = false;
        // и удалить все уже созданные астероиды
        asteroidSpawner.DestroyAllAsteroids();
    }
    // Вызывается в ответ на касание кнопки Pause или Unpause
    public void SetPaused(bool paused)
    {
        // Переключиться между интерфейсами паузы и игры
        inGameUI.SetActive(!paused);
        pausedUI.SetActive(paused);
        // Если игра приостановлена...
        if (paused)
        {
            // Остановить время
            Time.timeScale = 0.0f;
        }
        else
        {
            // Возобновить ход времени
            Time.timeScale = 1.0f;
        }
    }
}